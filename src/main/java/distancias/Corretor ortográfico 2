private final SortedSet{String} nWords = new TreeSet{String}(); 

private final char[] alfabeto = {'a','á','ä','à','ã','â','b','c','ç','d','e','é','ë','è','ê','f','g','h','i','í','ï','ì','î','j','k','l','m','n','o','ó','ö','ò','õ','ô','p','q','r','s','t','u','ú','ü','ù','û','v','x','y','z'}; 

public Spelling(String file) throws IOException { 
BufferedReader in = new BufferedReader(new FileReader(file)); 
for (String temp = ""; temp != null; temp = in.readLine()) { 
nWords.add(temp); 
} 
in.close(); 
} 

private ArrayList{String} edits(String word) { 
ArrayList{String} result = new ArrayList{String}(); 
for (int i = 0; i < word.length(); ++i) { 
result.add(word.substring(0, i) + word.substring(i + 1)); 
} 
for (int i = 0; i < word.length() - 1; ++i) { 
result.add(word.substring(0, i) + word.substring(i + 1, i + 2) + word.substring(i, i + 1) + word.substring(i + 2)); 
} 
for (int i = 0; i < word.length(); ++i) { 
for (int z=0; z char c = alfabeto[z]; 
result.add(word.substring(0, i) + String.valueOf(c) + word.substring(i + 1)); 
} 
} 
for (int i = 0; i <= word.length(); ++i) { 
for (int z=0; z char c = alfabeto[z]; 
result.add(word.substring(0, i) + String.valueOf(c) + word.substring(i)); 
} 
} 
return result; 
} 

public final String[] correct(String word) { 
if (nWords.contains(word)) { 
return null; 
} 
ArrayList{String} list = edits(word); 
SortedSet{String} candidates = new TreeSet{String}(); 
for (String s : list) { 
if (nWords.contains(s)) { 
candidates.add(s); 
} 
} 

if (candidates.size() > 0) { 
return candidates.toArray(new String[0]); 
} 
for (String s : list) { 
for (String w : edits(s)) { 
if (nWords.contains(w)) { 
candidates.add(w); 
} 
} 
} 
return candidates.size() > 0 ? candidates.toArray(new String[0]) : null;
